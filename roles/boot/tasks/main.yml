---
- name: configure initramfs build hooks
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^HOOKS=\('
    line: "HOOKS=({{ initramfs_hooks | join(' ') }})"

- name: configure initramfs build hooks
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^MODULES=\('
    line: "MODULES=({{ initramfs_modules | join(' ') }})"

- name: rebuild initramfs
  command: mkinitcpio -p {{ kernel }}
  args:
    creates: "initramfs-{{ kernel }}-fallback.img"

- name: restrict access permissions to initramfs
  file:
    path: "/boot/{{ item }}"
    mode: 0600
  with_items:
    - "initramfs-{{ kernel }}.img"
    - "initramfs-{{ kernel }}-fallback.img"

- name: install intel microcode
  pacman:
    name: intel-ucode
  when: cpu_manufacturer == "intel"

- name: install amd microcode
  pacman:
    name: amd-ucode
  when: cpu_manufacturer == "amd"

- name: delete old boot entries
  shell: >-
    variable=$(efibootmgr | grep "{{ boot.label }}" | awk '{ print $1 }' | sed 's/Boot//' | sed 's/*//') ; printf "$variable" | while IFS= read -r line ; do efibootmgr -Bb $line; done

- name: get root UUID
  command: blkid -s UUID -o value {{ crypt[0].device }}
  register: root_uuid
  changed_when: False
  check_mode: no

- name: setup boot items
  shell: >-
    efibootmgr 
    --create 
    --disk {{ boot.device }} 
    --part {{ boot.part }} 
    --label {{ boot.label }} 
    --loader /vmlinuz-{{ kernel }} 
    --unicode 
    --verbose
    'rd.luks.name={{ root_uuid.stdout }}={{ crypt_name }} root={{ root_part.device }} rw initrd=\initramfs-{{ kernel }}.img initrd=\{{ cpu_manufacturer }}-ucode.img loglevel=0' 
