---
- name: install intel microcode
  pacman:
    name: intel-ucode
  when: cpu_manufacturer == "intel"

- name: install amd microcode
  pacman:
    name: amd-ucode
  when: cpu_manufacturer == "amd"

- name: configure initramfs build hooks
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^HOOKS=\('
    line: "HOOKS=({{ initramfs_hooks | join(' ') }})"

- name: configure initramfs build modules
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^MODULES=\('
    line: "MODULES=({{ initramfs_modules | join(' ') }})"

- name: remove fallback preset
  lineinfile:
    path: /etc/mkinitcpio.d/{{ kernel }}.preset
    regexp: '^PRESETS'
    line: "PRESETS=('default')"

- name: uncomment preset file uki
  lineinfile:
    path: /etc/mkinitcpio.d/{{ kernel }}.preset
    regexp: '^#{{ item }}_uki'
    line: '{{ item }}_uki="{{ mounts[0].path }}/{{ hostname }}-arch-{{ kernel }}-{{ item }}.efi"'
  with_items:
    - "default"
    # - "fallback"

- name: comment preset file image
  lineinfile:
    path: /etc/mkinitcpio.d/{{ kernel }}.preset
    regexp: '^{{ item }}_image'
    line: '#{{ item }}_image="/boot/initramfs-{{ kernel }}-{{ item }}.img"'
  with_items:
    - "default"
    # - "fallback"

# - name: add preset file splash
#   lineinfile:
#     path: /etc/mkinitcpio.d/{{ kernel }}.preset
#     regexp: '^#default_options'
#     line: 'default_options="--splash /usr/share/systemd/bootctl/splash-arch.bmp"'

- name: delete old boot entries
  shell: >-
    variable=$(efibootmgr | grep "{{ partitions[0].label }}" | awk '{ print $1 }' | sed 's/Boot//' | sed 's/*//') ; printf "$variable" | while IFS= read -r line ; do efibootmgr -Bb $line; done

- name: delete default mkinitcpio img files
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "/boot/initramfs-{{ kernel }}.img"
    - "/boot/initramfs-{{ kernel }}-fallback.img"

- name: get root UUID
  command: blkid -s UUID -o value {{ crypt[0].device }}
  register: root_uuid
  changed_when: False
  check_mode: no

- name: save cmdline boot
  copy:
    dest: /etc/kernel/cmdline
    content: 'rd.luks.name={{ root_uuid.stdout }}={{ crypt[0].name }} rd.luks.options=timeout=0 root={{ root.device }} rootflags=x-systemd.device-timeout=0 rw quiet splash loglevel=3 fbcon=nodefer'

- name: rebuild UKI
  command: mkinitcpio -p {{ kernel }}
# WARNING: THIS IS BAD and will be replaced when sbctl is working
#  register: mkinit_res
#  failed_when: ( mkinit_res.rc not in [ 0, 1 ] )
  args:
    creates:
      - "{{ mounts[0].path }}/{{ hostname }}-arch-{{ kernel }}-default.efi"
      # - "/boot/arch-{{ kernel }}-fallback.efi"

- name: restrict access permissions to UKI efi file
  file:
    path: "{{ mounts[0].path }}/{{ hostname }}-arch-{{ kernel }}-{{ item }}.efi"
    mode: 0600
  with_items:
    - "default"
    # - "fallback"

- name: setup boot items
  shell: >-
    efibootmgr
    --create
    --disk {{ partitions[0].device }}
    --part {{ partitions[0].number }}
    --label {{ partitions[0].label }}
    --loader "/{{ hostname }}-arch-{{ kernel }}-default.efi"
    --unicode
    --verbose

#    'rd.luks.name={{ root_uuid.stdout }}={{ crypt[0].name }} root={{ root.device }} rw initrd=\initramfs-{{ kernel }}.img initrd=\{{ cpu_manufacturer }}-ucode.img loglevel=0'
