---
- include_vars: "extra_vars/disks.yml"
  when: '(nocrypt == false) and (nolvm == false)'
- include_vars: "extra_vars/nocrypt.yml"
  when: '(nocrypt == true ) and (nolvm == false)'
- include_vars: "extra_vars/nolvm.yml"
  when: '(nocrypt == false) and (nolvm == true )'
- include_vars: "extra_vars/plain.yml"
  when: '(nocrypt == true ) and (nolvm == true )'

- name: include vars from fsmnt
  include_vars: roles/fsmnt/defaults/main.yml
# needed_vars:
# mounts[0].path
# root.disk
# root.device

- name: include vars from part
  include_vars: roles/part/defaults/main.yml
# needed_vars:
# partitions[0].device
# partitions[0].number
# partitions[0].label

- name: include vars from part
  include_vars: roles/luks/defaults/main.yml
  when: nocrypt == false
# needed_vars:
# crypt[0].name

- name: install intel microcode
  pacman:
    name: intel-ucode
  when: cpu_manufacturer == "intel"

- name: install amd microcode
  pacman:
    name: amd-ucode
  when: cpu_manufacturer == "amd"

- name: configure initramfs build hooks
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^HOOKS=\('
    line: "HOOKS=({{ initramfs_hooks | join(' ') }})"

- name: configure initramfs build modules
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^MODULES=\('
    line: "MODULES=({{ initramfs_modules | join(' ') }})"

- name: remove fallback preset
  lineinfile:
    path: /etc/mkinitcpio.d/{{ kernel }}.preset
    regexp: '^PRESETS'
    line: "PRESETS=('default')"

- name: uncomment preset file uki
  lineinfile:
    path: /etc/mkinitcpio.d/{{ kernel }}.preset
    regexp: '^#{{ item }}_uki'
    line: '{{ item }}_uki="{{ mounts[0].path }}/{{ hostname }}-arch-{{ kernel }}-{{ item }}.efi"'
  with_items:
    - "default"
    # - "fallback"

- name: comment preset file image
  lineinfile:
    path: /etc/mkinitcpio.d/{{ kernel }}.preset
    regexp: '^{{ item }}_image'
    line: '#{{ item }}_image="/boot/initramfs-{{ kernel }}-{{ item }}.img"'
  with_items:
    - "default"
    # - "fallback"

# @TODO make this idempotent
- name: delete old boot entries
  shell: >-
    variable=$(efibootmgr | grep "{{ partitions[0].label }}" | awk '{ print $1 }' | sed 's/Boot//' | sed 's/*//') ; printf "$variable" | while IFS= read -r line ; do efibootmgr -Bb $line; done

- name: delete default mkinitcpio img files
  file:
    state: absent
    path: "{{ item }}"
  with_items:
    - "/boot/initramfs-{{ kernel }}.img"
    - "/boot/initramfs-{{ kernel }}-fallback.img"

- name: get root UUID
  command: blkid -s UUID -o value {{ root.disk }}
  register: root_uuid
  changed_when: false
  check_mode: no

# @TODO see if we can combine these two tasks so it doesnt rely on the when
- name: save cmdline boot
  copy:
    dest: /etc/kernel/cmdline
    content: 'rd.luks.name={{ root_uuid.stdout }}={{ crypt[0].name }} rd.luks.options=timeout=0 root={{ root.device }} rootflags=x-systemd.device-timeout=0 rw quiet splash loglevel=3 fbcon=nodefer'
  when: nocrypt == false

- name: save cmdline boot no crypt
  copy:
    dest: /etc/kernel/cmdline
    content: 'root={{ root.device }} rootflags=x-systemd.device-timeout=0 rw quiet splash loglevel=3 fbcon=nodefer'
  when: nocrypt == true

- name: rebuild UKI
  command: mkinitcpio -p {{ kernel }}
  args:
    creates:
      - "{{ mounts[0].path }}/{{ hostname }}-arch-{{ kernel }}-default.efi"
      # - "/boot/arch-{{ kernel }}-fallback.efi"

- name: restrict access permissions to UKI efi file
  file:
    path: "{{ mounts[0].path }}/{{ hostname }}-arch-{{ kernel }}-{{ item }}.efi"
    mode: 0600
  with_items:
    - "default"
    # - "fallback"

- name: create NVRAM entry
  shell: >-
    efibootmgr
    --create
    --disk {{ partitions[0].device }}
    --part {{ partitions[0].number }}
    --label {{ partitions[0].label }}
    --loader "/{{ hostname }}-arch-{{ kernel }}-default.efi"
    --unicode
    --verbose
# when: delete old boot entries runs
