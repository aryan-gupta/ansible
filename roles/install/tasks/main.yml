---
- name: Upgrade system to latest state
  pacman:
    update_cache: yes
    upgrade: yes

- name: configure locales
  community.general.locale_gen:
    name: "{{ item }}"
    state: present
  with_items: "{{ locales }}"

- name: set active locale to English US
  lineinfile:
    path: /etc/locale.conf
    line: "LANG={{ locales[0] }}"
    create: yes

- name: set timezone
  file:
    src: "/usr/share/zoneinfo/{{ timezone }}"
    dest: /etc/localtime
    state: link

- name: set hardware clock from system and configure for UTC timescale
  command: hwclock --systohc --utc
  args:
    creates: /etc/adjtime

- name: Configure hostname
  lineinfile:
    path: /etc/hostname
    line: "{{ hostname }}"
    create: yes

- name: Configure hosts file
  template:
    src: hosts.j2
    dest: /etc/hosts
    mode: 644

- name: install base packages
  pacman:
    name: "{{ base_packages }}"
    extra_args: --needed

- name: configure console font
  lineinfile:
    path: /etc/vconsole.conf
    line: "KEYMAP=ter-122n"
    create: yes

- name: configure initramfs build hooks
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^HOOKS=\('
    line: "HOOKS=({{ initramfs_hooks | join(' ') }})"

- name: configure initramfs build hooks
  lineinfile:
    path: /etc/mkinitcpio.conf
    regexp: '^MODULES=\('
    line: "MODULES=({{ initramfs_modules | join(' ') }})"

- name: rebuild initramfs
  command: mkinitcpio -p {{ kernel }}
  args:
    creates: "initramfs-{{ kernel }}-fallback.img"

- name: restrict access permissions to initramfs
  file:
    path: "/boot/{{ item }}"
    mode: 0600
  with_items:
    - "initramfs-{{ kernel }}.img"
    - "initramfs-{{ kernel }}-fallback.img"

- name: install intel microcode
  pacman:
    name: intel-ucode
  when: "'GenuineIntel' in ansible_processor"

- name: delete old boot entries
  shell: >-
    variable=$(efibootmgr | grep "{{ boot.label }}" | sed 's/* {{ boot.label }}//' | sed 's/Boot//')
    printf "$variable" | while IFS= read -r line ; do efibootmgr -Bb $line; done

- name: get root UUID
  command: blkid -s UUID -o value {{ crypt[0].device }}
  register: root_uuid
  changed_when: False
  check_mode: no

- name: setup boot items
  shell: >-
    efibootmgr --disk {{ boot.device }} --part {{ boot.part }} --create --label
    {{ boot.label }} --loader /vmlinuz-{{ kernel }} --unicode 
    'rd.luks.name={{ root_uuid.stdout }}={{ crypt_name }}
    root={{ root_part.device }} rw initrd=\initramfs-{{ kernel }}.img loglevel=3' --verbose

- name: copy boot script to boot part
  copy: 
    content: >- 
      efibootmgr --disk {{ boot.device }} --part {{ boot.part }} --create --label
      {{ boot.label }} --loader /vmlinuz-{{ kernel }} --unicode 
      'rd.luks.name={{ root_uuid.stdout }}={{ crypt_name }}
      root={{ root_part.device }} rw initrd=\initramfs-{{ kernel }}.img loglevel=3' --verbose
    dest: "{{ boot.mount }}/boot.sh"
